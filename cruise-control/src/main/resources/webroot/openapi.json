{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "Cruise-control is the first of its kind to fully automate the dynamic workload rebalance and self-healing of a kafka cluster. It provides great value to Kafka users by simplifying the operation of Kafka clusters.",
    "title" : "Cruise Control API",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "paths" : {
    "/kafkacruisecontrol/add_broker" : {
      "post" : {
        "operationId" : "addBroker",
        "parameters" : [ {
          "description" : "List of target broker ids.",
          "in" : "query",
          "name" : "brokerid",
          "required" : true,
          "schema" : {
            "items" : {
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to dry-run the request or not.",
          "in" : "query",
          "name" : "dryrun",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to throttle the added broker.",
          "in" : "query",
          "name" : "throttle_added_broker",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "List of goals used to generate proposal, the default goals will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "goals",
          "schema" : {
            "example" : [ "RackAwareGoal", "ReplicaCapacityGoal", "ReplicaDistributionGoal" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "The upper bound of ongoing replica movements going into/out of each broker.",
          "in" : "query",
          "name" : "concurrent_partition_movements_per_broker",
          "schema" : {
            "default" : 5,
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "The upper bound of ongoing leadership movements.",
          "in" : "query",
          "name" : "concurrent_leader_movements",
          "schema" : {
            "default" : 1000,
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow hard goals be skipped in proposal generation.",
          "in" : "query",
          "name" : "skip_hard_goal_check",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Specify topic whose partition is excluded from replica movement.",
          "in" : "query",
          "name" : "excluded_topics",
          "schema" : {
            "example" : "__CruiseControl.%2A",
            "type" : "string"
          }
        }, {
          "description" : "Whether to use Kafka assigner mode to generate proposals.",
          "in" : "query",
          "name" : "kafka_assigner",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to only use ready goals to generate proposal.",
          "in" : "query",
          "name" : "use_ready_default_goals",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow leader replicas to be moved to recently demoted brokers.",
          "in" : "query",
          "name" : "exclude_recently_demoted_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow replicas to be moved to recently removed broker.",
          "in" : "query",
          "name" : "exclude_recently_removed_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Replica movement strategies to use.",
          "in" : "query",
          "name" : "replica_movement_strategies",
          "schema" : {
            "example" : [ "PrioritizeLargeReplicaMovementStrategy", "PostponeUrpReplicaMovementStrategy" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Execution progress check interval in milliseconds.",
          "in" : "query",
          "name" : "execution_progress_check_interval_ms",
          "schema" : {
            "format" : "int64",
            "minimum" : 5000,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to stop the ongoing execution (if any) and start executing the given request.",
          "in" : "query",
          "name" : "stop_ongoing_execution",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to calculate proposal from available valid partitions or valid windows.",
          "in" : "query",
          "name" : "data_from",
          "schema" : {
            "default" : "VALID_WINDOWS",
            "type" : "string"
          }
        }, {
          "description" : "Upper bound on the bandwidth in bytes per second used to move replicas.",
          "in" : "query",
          "name" : "replication_throttle",
          "schema" : {
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "True to compute proposals in fast mode, false otherwise",
          "in" : "query",
          "name" : "fast_mode",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OptimizationResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful add brokers response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Add brokers in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Move partitions to the specified brokers, according to the specified goals."
      }
    },
    "/kafkacruisecontrol/admin" : {
      "post" : {
        "operationId" : "admin",
        "parameters" : [ {
          "description" : "Disable self-healing for certain anomaly types.",
          "in" : "query",
          "name" : "disable_self_healing_for",
          "schema" : {
            "example" : [ "METRIC_ANOMALY" ],
            "items" : {
              "enum" : [ "GOAL_VIOLATION", "BROKER_FAILURE", "METRIC_ANOMALY", "DISK_FAILURE", "TOPIC_ANOMALY" ],
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Enable self-healing for certain anomaly types.",
          "in" : "query",
          "name" : "enable_self_healing_for",
          "schema" : {
            "example" : [ "GOAL_VIOLATION", "BROKER_FAILURE" ],
            "items" : {
              "enum" : [ "GOAL_VIOLATION", "BROKER_FAILURE", "METRIC_ANOMALY", "DISK_FAILURE", "TOPIC_ANOMALY" ],
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Change upper bound of ongoing replica movements going into/out of each broker.",
          "in" : "query",
          "name" : "concurrent_partition_movements_per_broker",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Change upper bound of ongoing replica movements between disks within each broker.",
          "in" : "query",
          "name" : "concurrent_intra_broker_partition_movements",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Change upper bound of ongoing leadership movements.",
          "in" : "query",
          "name" : "concurrent_leader_movements",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Drop broker ids from recently removed broker list so that Cruise Control can move replicas to these brokers.",
          "in" : "query",
          "name" : "drop_recently_removed_brokers",
          "schema" : {
            "example" : [ 1, 2, 3 ],
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Drop broker ids from recently demoted broker list so that Cruise Control can move leader replicas or to transfer replica leadership to these brokers.",
          "in" : "query",
          "name" : "drop_recently_demoted_brokers",
          "schema" : {
            "example" : [ 7, 8, 9 ],
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Change execution progress check interval in milliseconds.",
          "in" : "query",
          "name" : "execution_progress_check_interval_ms",
          "schema" : {
            "format" : "int64",
            "minimum" : 5000,
            "type" : "integer"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Disable concurrency adjuster for given concurrency types.",
          "in" : "query",
          "name" : "disable_concurrency_adjuster_for",
          "schema" : {
            "example" : [ "INTER_BROKER_REPLICA" ],
            "items" : {
              "enum" : [ "INTER_BROKER_REPLICA", "LEADERSHIP", "INTRA_BROKER_REPLICA" ],
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Enable concurrency adjuster for given concurrency types.",
          "in" : "query",
          "name" : "enable_concurrency_adjuster_for",
          "schema" : {
            "example" : [ "INTER_BROKER_REPLICA" ],
            "items" : {
              "enum" : [ "INTER_BROKER_REPLICA", "LEADERSHIP", "INTRA_BROKER_REPLICA" ],
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to enable (true) or disable (false) MinISR-based concurrency adjustment",
          "in" : "query",
          "name" : "min_isr_based_concurrency_adjustment",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful admin response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Dynamically change some configs of Cruise Control."
      }
    },
    "/kafkacruisecontrol/bootstrap" : {
      "get" : {
        "operationId" : "bootstrap",
        "parameters" : [ {
          "description" : "Timestamp in millisecond of earliest metrics sample to load during bootstrap.",
          "in" : "query",
          "name" : "start",
          "schema" : {
            "default" : -1,
            "format" : "int64",
            "minimum" : -1,
            "type" : "integer"
          }
        }, {
          "description" : "Timestamp in millisecond of latest metrics sample to load during bootstrap, current time will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "end",
          "schema" : {
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to clear the collected metric samples during bootstrap.",
          "in" : "query",
          "name" : "clearmetrics",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to run the request in developer mode.",
          "in" : "query",
          "name" : "developer_mode",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BootstrapResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful admin response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Bootstrap Cruise Control."
      }
    },
    "/kafkacruisecontrol/demote_broker" : {
      "post" : {
        "operationId" : "demoteBroker",
        "parameters" : [ {
          "description" : "List of target broker ids.",
          "in" : "query",
          "name" : "brokerid",
          "required" : true,
          "schema" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to dry-run the request or not.",
          "in" : "query",
          "name" : "dryrun",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "The upper bound of ongoing leadership movements.",
          "in" : "query",
          "name" : "concurrent_leader_movements",
          "schema" : {
            "default" : 1000,
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to operate on partitions which are currently under-replicated.",
          "in" : "query",
          "name" : "skip_urp_demotion",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to operate on partitions which only have follower replicas on the specified broker(s).",
          "in" : "query",
          "name" : "exclude_follower_demotion",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow leader replicas to be moved to recently demoted brokers.",
          "in" : "query",
          "name" : "exclude_recently_demoted_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Replica movement strategies to use.",
          "in" : "query",
          "name" : "replica_movement_strategies",
          "schema" : {
            "example" : [ "PrioritizeLargeReplicaMovementStrategy", "PostponeUrpReplicaMovementStrategy" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "List of broker id and logdir pair to be demoted in the cluster.",
          "in" : "query",
          "name" : "brokerid_and_logdirs",
          "schema" : {
            "additionalProperties" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            },
            "type" : "object"
          }
        }, {
          "description" : "Upper bound on the bandwidth in bytes per second used to move replicas.",
          "in" : "query",
          "name" : "replication_throttle",
          "schema" : {
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Execution progress check interval in milliseconds.",
          "in" : "query",
          "name" : "execution_progress_check_interval_ms",
          "schema" : {
            "format" : "int64",
            "minimum" : 5000,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to stop the ongoing execution (if any) and start executing the given request.",
          "in" : "query",
          "name" : "stop_ongoing_execution",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OptimizationResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful demote brokers response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Demote brokers in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Demote specified brokers."
      }
    },
    "/kafkacruisecontrol/fix_offline_replicas" : {
      "post" : {
        "operationId" : "fixOfflineReplicas",
        "parameters" : [ {
          "description" : "Whether dry-run the request or not.",
          "in" : "query",
          "name" : "dryrun",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "List of goals used to generate proposal, the default goals will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "goals",
          "schema" : {
            "example" : [ "RackAwareGoal", "ReplicaCapacityGoal", "ReplicaDistributionGoal" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The upper bound of ongoing replica movements going into/out of each broker.",
          "in" : "query",
          "name" : "concurrent_partition_movements_per_broker",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "The upper bound of ongoing leadership movements.",
          "in" : "query",
          "name" : "concurrent_leader_movements",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow hard goals be skipped in proposal generation.",
          "in" : "query",
          "name" : "skip_hard_goal_check",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Specify topic whose partition is excluded from replica movement.",
          "example" : "__CruiseControl.%2A",
          "in" : "query",
          "name" : "excluded_topics",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether to only use ready goals to generate proposal.",
          "in" : "query",
          "name" : "use_ready_default_goals",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to calculate proposal from available valid partitions or valid windows.",
          "in" : "query",
          "name" : "data_from",
          "schema" : {
            "default" : "VALID_WINDOWS",
            "type" : "string"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow leader replicas to be moved to recently demoted brokers.",
          "in" : "query",
          "name" : "exclude_recently_demoted_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow leader replicas to be moved to recently removed broker.",
          "in" : "query",
          "name" : "exclude_recently_removed_brokers",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Replica movement strategies to use.",
          "in" : "query",
          "name" : "replica_movement_strategies",
          "schema" : {
            "example" : [ "PrioritizeLargeReplicaMovementStrategy", "PostponeUrpReplicaMovementStrategy" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Upper bound on the bandwidth in bytes per second used to move replicas.",
          "in" : "query",
          "name" : "replication_throttle",
          "schema" : {
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Execution progress check interval in milliseconds.",
          "in" : "query",
          "name" : "execution_progress_check_interval_ms",
          "schema" : {
            "format" : "int64",
            "minimum" : 5000,
            "type" : "integer"
          }
        }, {
          "description" : "Reason for request.",
          "example" : "Move offline replicas away from broken brokers.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether to stop the ongoing execution (if any) and start executing the given request.",
          "in" : "query",
          "name" : "stop_ongoing_execution",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "True to compute proposals in fast mode, false otherwise",
          "in" : "query",
          "name" : "fast_mode",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OptimizationResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful rebalance response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Fix in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Fix offline replicas by moving currently offline replicas to healthy brokers."
      }
    },
    "/kafkacruisecontrol/kafka_cluster_state" : {
      "get" : {
        "operationId" : "kafkaClusterState",
        "parameters" : [ {
          "description" : "Topic regex to filter partition information in response.",
          "in" : "query",
          "name" : "topic",
          "schema" : {
            "example" : "myTopic.*",
            "type" : "string"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KafkaClusterState"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Current Kafka cluster state."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Retrive the current Kafka cluster state."
      }
    },
    "/kafkacruisecontrol/load" : {
      "get" : {
        "operationId" : "load",
        "parameters" : [ {
          "description" : "Start time of the cluster load. Default is time of earliest valid window.",
          "in" : "query",
          "name" : "start",
          "schema" : {
            "default" : -1,
            "format" : "int64",
            "minimum" : -1,
            "type" : "integer"
          }
        }, {
          "description" : "End time of the cluster load. Default is current system time.",
          "in" : "query",
          "name" : "end",
          "schema" : {
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "End time of the clutser load. Default is current system time, mutually exclusive with end parameter.",
          "in" : "query",
          "name" : "time",
          "schema" : {
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether show the load of each disk of broker.",
          "in" : "query",
          "name" : "populate_disk_info",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether show only the cluster capacity or the utilization, as well.",
          "in" : "query",
          "name" : "capacity_only",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BrokerStats"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful load from valid partitions response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Get the cluster load once Cruise Control Load Monitor is running."
      }
    },
    "/kafkacruisecontrol/partition_load" : {
      "get" : {
        "operationId" : "partitionload",
        "parameters" : [ {
          "description" : "The host and broker-level resource by which to sort the cruise-control response.",
          "in" : "query",
          "name" : "resource",
          "schema" : {
            "default" : "disk",
            "enum" : [ "cpu", "networkInbound", "networkOutbound", "disk" ],
            "type" : "string"
          }
        }, {
          "description" : "The timestamp in millisecond of the earliest metric sample use to generate load.",
          "in" : "query",
          "name" : "start",
          "schema" : {
            "default" : -1,
            "format" : "int64",
            "minimum" : -1,
            "type" : "integer"
          }
        }, {
          "description" : "The timestamp in millisecond of the latest metric sample use to generate load, current time will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "end",
          "schema" : {
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "The number of entries to show in the response.",
          "in" : "query",
          "name" : "entries",
          "schema" : {
            "default" : 2147483647,
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "A regular expression used to filter the partition load returned based on topic.",
          "in" : "query",
          "name" : "topic",
          "schema" : {
            "example" : "myTopic.*",
            "type" : "string"
          }
        }, {
          "description" : "The partition or partition range to filter partition load returned.",
          "in" : "query",
          "name" : "partition",
          "schema" : {
            "oneOf" : [ {
              "format" : "int32",
              "type" : "integer"
            }, {
              "example" : "[{value=0-9}, {summary=0 is the start index and 9 is the end index of the partition boundaries.}]",
              "pattern" : "^[0-9]+-[0-9]+$",
              "type" : "string"
            } ]
          }
        }, {
          "description" : "The minimum required ratio of partition load data completeness.",
          "in" : "query",
          "name" : "min_valid_partition_ratio",
          "schema" : {
            "default" : 0.98,
            "format" : "double",
            "maximum" : 1.0,
            "minimum" : 0.0,
            "type" : "number"
          }
        }, {
          "description" : "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "If true, the maximum load is returned.",
          "in" : "query",
          "name" : "max_load",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "If true, the average load is returned.",
          "in" : "query",
          "name" : "avg_load",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Set of broker ids used to filter partition load returned.",
          "in" : "query",
          "name" : "brokerid",
          "schema" : {
            "example" : [ 1, 2, 3 ],
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionLoadState"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful partition load state response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Partition load state fetch in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Get the resource load for each partition."
      }
    },
    "/kafkacruisecontrol/pause_sampling" : {
      "post" : {
        "operationId" : "pauseSampling",
        "parameters" : [ {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PauseSamplingResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful execution response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Pause metric sampling."
      }
    },
    "/kafkacruisecontrol/proposals" : {
      "get" : {
        "operationId" : "proposals",
        "parameters" : [ {
          "description" : "Whether to use Kafka assigner mode to generate proposals.",
          "in" : "query",
          "name" : "kafka_assigner",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Specify brokers to move replicas to.",
          "in" : "query",
          "name" : "destination_broker_ids",
          "schema" : {
            "example" : [ 1, 2, 3 ],
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to ignore the cached proposal or not.",
          "in" : "query",
          "name" : "ignore_proposal_cache",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "whether to balance load between disks within brokers (requires JBOD Kafka deployment).",
          "in" : "query",
          "name" : "rebalance_disk",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to calculate proposal from available valid partitions or valid windows.",
          "in" : "query",
          "name" : "data_from",
          "schema" : {
            "default" : "VALID_WINDOWS",
            "enum" : [ "VALID_WINDOWS", "VALID_PARTITIONS" ],
            "type" : "string"
          }
        }, {
          "description" : "Whether to use only ready goals to generate proposals.",
          "in" : "query",
          "name" : "use_ready_default_goals",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Specify topic whose partition is excluded from replica movement.",
          "example" : "__CruiseControl.%2A",
          "in" : "query",
          "name" : "excluded_topics",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether allow replicas to be moved to recently removed broker.",
          "in" : "query",
          "name" : "exclude_recently_removed_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "List of goals used to generate proposal, the default goals will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "goals",
          "schema" : {
            "example" : [ "RackAwareGoal", "ReplicaCapacityGoal", "ReplicaDistributionGoal" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to allow broker capacity to be estimated.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow leader replicas to be moved to recently demoted brokers.",
          "in" : "query",
          "name" : "exclude_recently_demoted_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "True to compute proposals in fast mode, false otherwise",
          "in" : "query",
          "name" : "fast_mode",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OptimizationResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful optimization proposals response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              }
            },
            "description" : "Optimization proposals generation in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Get current proposals."
      }
    },
    "/kafkacruisecontrol/rebalance" : {
      "post" : {
        "operationId" : "rebalance",
        "parameters" : [ {
          "description" : "Whether to dry-run the request or not.",
          "in" : "query",
          "name" : "dryrun",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "List of goals used to generate proposal, the default goals will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "goals",
          "schema" : {
            "example" : [ "RackAwareGoal", "ReplicaCapacityGoal", "ReplicaDistributionGoal" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to stop the ongoing execution (if any) and start executing the given request.",
          "in" : "query",
          "name" : "stop_ongoing_execution",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The upper bound of ongoing replica movements going into/out of each broker.",
          "in" : "query",
          "name" : "concurrent_partition_movements_per_broker",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "The upper bound of ongoing replica movements between disks within each broker.",
          "in" : "query",
          "name" : "concurrent_intra_broker_partition_movements",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "The upper bound of ongoing leadership movements.",
          "in" : "query",
          "name" : "concurrent_leader_movements",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow hard goals be skipped in proposal generation.",
          "in" : "query",
          "name" : "skip_hard_goal_check",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Specify topic whose partition is excluded from replica movement.",
          "in" : "query",
          "name" : "excluded_topics",
          "schema" : {
            "example" : "__CruiseControl.%2A",
            "type" : "string"
          }
        }, {
          "description" : "Whether to only use ready goals to generate proposal.",
          "in" : "query",
          "name" : "use_ready_default_goals",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to calculate proposal from available valid partitions or valid windows.",
          "in" : "query",
          "name" : "data_from",
          "schema" : {
            "default" : "VALID_WINDOWS",
            "type" : "string"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow leader replicas to be moved to recently demoted brokers.",
          "in" : "query",
          "name" : "exclude_recently_demoted_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow replicas to be moved to recently removed broker.",
          "in" : "query",
          "name" : "exclude_recently_removed_brokers",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Replica movement strategies to use.",
          "in" : "query",
          "name" : "replica_movement_strategies",
          "schema" : {
            "example" : [ "PrioritizeLargeReplicaMovementStrategy", "PostponeUrpReplicaMovementStrategy" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to ignore the cached proposal or not.",
          "in" : "query",
          "name" : "ignore_proposal_cache",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Specify the destination brokers for partitions to move replicas to.",
          "in" : "query",
          "name" : "destination_broker_ids",
          "schema" : {
            "example" : [ 1, 2, 3 ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to use Kafka assigner mode to generate proposals.",
          "in" : "query",
          "name" : "kafka_assigner",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to balance load between disks within brokers (requires JBOD Kafka deployment).",
          "in" : "query",
          "name" : "rebalance_disk",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Upper bound on the bandwidth in bytes per second used to move replicas.",
          "in" : "query",
          "name" : "replication_throttle",
          "schema" : {
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Execution progress check interval in milliseconds.",
          "in" : "query",
          "name" : "execution_progress_check_interval_ms",
          "schema" : {
            "format" : "int64",
            "minimum" : 5000,
            "type" : "integer"
          }
        }, {
          "description" : "Reason for request.",
          "example" : "Balance disk utilization across all brokers in the cluster.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "True to compute proposals in fast mode, false otherwise",
          "in" : "query",
          "name" : "fast_mode",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OptimizationResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful rebalance response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Rebalancing in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Rebalance a Kafka cluster based on goals."
      }
    },
    "/kafkacruisecontrol/remove_broker" : {
      "post" : {
        "operationId" : "removeBroker",
        "parameters" : [ {
          "description" : "List of target broker ids.",
          "in" : "query",
          "name" : "brokerid",
          "required" : true,
          "schema" : {
            "items" : {
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to dry-run the request or not.",
          "in" : "query",
          "name" : "dryrun",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to throttle the added broker.",
          "in" : "query",
          "name" : "throttle_removed_broker",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "List of goals used to generate proposal, the default goals will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "goals",
          "schema" : {
            "example" : [ "RackAwareGoal", "ReplicaCapacityGoal", "ReplicaDistributionGoal" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "The upper bound of ongoing replica movements going into/out of each broker.",
          "in" : "query",
          "name" : "concurrent_partition_movements_per_broker",
          "schema" : {
            "default" : 5,
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "The upper bound of ongoing leadership movements.",
          "in" : "query",
          "name" : "concurrent_leader_movements",
          "schema" : {
            "default" : 1000,
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow hard goals be skipped in proposal generation.",
          "in" : "query",
          "name" : "skip_hard_goal_check",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Specify topic whose partition is excluded from replica movement.",
          "in" : "query",
          "name" : "excluded_topics",
          "schema" : {
            "example" : "__CruiseControl.%2A",
            "type" : "string"
          }
        }, {
          "description" : "Whether to use Kafka assigner mode to generate proposals.",
          "in" : "query",
          "name" : "kafka_assigner",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to only use ready goals to generate proposal.",
          "in" : "query",
          "name" : "use_ready_default_goals",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow leader replicas to be moved to recently demoted brokers.",
          "in" : "query",
          "name" : "exclude_recently_demoted_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow replicas to be moved to recently removed broker.",
          "in" : "query",
          "name" : "exclude_recently_removed_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Replica movement strategies to use.",
          "in" : "query",
          "name" : "replica_movement_strategies",
          "schema" : {
            "example" : [ "PrioritizeLargeReplicaMovementStrategy", "PostponeUrpReplicaMovementStrategy" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Comma-separated and/or space-separated list of broker IDs.",
          "in" : "query",
          "name" : "destination_broker_ids",
          "schema" : {
            "items" : {
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Execution progress check interval in milliseconds.",
          "in" : "query",
          "name" : "execution_progress_check_interval_ms",
          "schema" : {
            "format" : "int64",
            "minimum" : 5000,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to stop the ongoing execution (if any) and start executing the given request.",
          "in" : "query",
          "name" : "stop_ongoing_execution",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to calculate proposal from available valid partitions or valid windows.",
          "in" : "query",
          "name" : "data_from",
          "schema" : {
            "default" : "VALID_WINDOWS",
            "type" : "string"
          }
        }, {
          "description" : "Upper bound on the bandwidth in bytes per second used to move replicas.",
          "in" : "query",
          "name" : "replication_throttle",
          "schema" : {
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "True to compute proposals in fast mode, false otherwise",
          "in" : "query",
          "name" : "fast_mode",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OptimizationResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful add brokers response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Add brokers in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Remove/decomission specified brokers."
      }
    },
    "/kafkacruisecontrol/rightsize" : {
      "post" : {
        "operationId" : "rightsize",
        "parameters" : [ {
          "description" : "The difference in broker count to rightsize towards.",
          "in" : "query",
          "name" : "num_brokers_to_add",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "The target number of partitions to rightsize towards.",
          "in" : "query",
          "name" : "partition_count",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Regular expression to specify subject topics.",
          "in" : "query",
          "name" : "topic",
          "schema" : {
            "example" : "topic_%5B0-9%5D.%2A",
            "type" : "string"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RightsizeResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful rightsize response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Manually invoke provisioner rightsizing of the cluster."
      }
    },
    "/kafkacruisecontrol/resume_sampling" : {
      "post" : {
        "operationId" : "resumeSampling",
        "parameters" : [ {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResumeSamplingResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful execution response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Resume metric sampling."
      }
    },
    "/kafkacruisecontrol/review" : {
      "post" : {
        "operationId" : "review",
        "parameters" : [ {
          "description" : "Approve one or more pending Cruise Control requests.",
          "in" : "query",
          "name" : "approve",
          "schema" : {
            "example" : [ 1, 2, 3 ],
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Reject one or more pending Cruise Control requests.",
          "in" : "query",
          "name" : "discard",
          "schema" : {
            "example" : [ 4, 5, 6 ],
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Reason of approval or rejection.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful review response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Reivew pending Cruise Control requests."
      }
    },
    "/kafkacruisecontrol/review_board" : {
      "get" : {
        "operationId" : "reviewBoard",
        "parameters" : [ {
          "description" : "Ids for selected request to check.",
          "in" : "query",
          "name" : "review_ids",
          "schema" : {
            "example" : [ 1, 2, 3 ],
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful review response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Check review status of Cruise Control requests."
      }
    },
    "/kafkacruisecontrol/state" : {
      "get" : {
        "operationId" : "state",
        "parameters" : [ {
          "description" : "The substates for which to retrieve state from cruise-control.",
          "in" : "query",
          "name" : "substates",
          "schema" : {
            "items" : {
              "enum" : [ "executor", "analyzer", "monitor", "anomaly_detector" ],
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Return super-verbose state information.",
          "in" : "query",
          "name" : "super_verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CruiseControlState"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful state response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "State querying in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Get the state of cruise control."
      }
    },
    "/kafkacruisecontrol/stop_proposal_execution" : {
      "post" : {
        "operationId" : "stopProposalExecution",
        "parameters" : [ {
          "description" : "If true, stop execution forcefully by deleting the /admin/partition_reassignemt, /preferred_replica_election and /controller zNodes in Zookeeper.",
          "in" : "query",
          "name" : "force_stop",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "If true, stop any ongoing execution even if it is started by an external agent. If false, only stop execution started by the current CC instance. This parameter would only be honored with Kafka 2.4 or above.",
          "in" : "query",
          "name" : "stop_external_agent",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "format" : "int32",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StopProposalResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful admin response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Stop ongoing execution in Cruise Control."
      }
    },
    "/kafkacruisecontrol/topic_configuration" : {
      "post" : {
        "operationId" : "topicConfiguration",
        "parameters" : [ {
          "description" : "Whether to dry-run the request or not.",
          "in" : "query",
          "name" : "dryrun",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        }, {
          "description" : "Regular expression to specify subject topics.",
          "in" : "query",
          "name" : "topic",
          "schema" : {
            "example" : "topic_%5B0-9%5D.%2A",
            "type" : "string"
          }
        }, {
          "description" : "Target replication factor.",
          "in" : "query",
          "name" : "replication_factor",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to calculate proposal from available valid partitions or valid windows.",
          "in" : "query",
          "name" : "data_from",
          "schema" : {
            "default" : "VALID_WINDOWS",
            "type" : "string"
          }
        }, {
          "description" : "List of goals used to generate proposal, the default goals will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "goals",
          "schema" : {
            "example" : [ "RackAwareGoal", "ReplicaCapacityGoal", "ReplicaDistributionGoal" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information.",
          "in" : "query",
          "name" : "allow_capacity_estimation",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The upper bound of ongoing replica movements going into/out of each broker.",
          "in" : "query",
          "name" : "concurrent_partition_movements_per_broker",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "The upper bound of ongoing leadership movements.",
          "in" : "query",
          "name" : "concurrent_leader_movements",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to allow hard goals be skipped in proposal generation.",
          "in" : "query",
          "name" : "skip_hard_goal_check",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow leader replicas to be moved to recently demoted brokers.",
          "in" : "query",
          "name" : "exclude_recently_demoted_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to allow replicas to be moved to recently removed broker.",
          "in" : "query",
          "name" : "exclude_recently_removed_brokers",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Specify topic whose partition is excluded from replica movement.",
          "in" : "query",
          "name" : "excluded_topics",
          "schema" : {
            "example" : "__CruiseControl.%2A",
            "type" : "string"
          }
        }, {
          "description" : "Execution progress check interval in milliseconds.",
          "in" : "query",
          "name" : "execution_progress_check_interval_ms",
          "schema" : {
            "format" : "int64",
            "minimum" : 5000,
            "type" : "integer"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Replica movement strategies to use.",
          "in" : "query",
          "name" : "replica_movement_strategies",
          "schema" : {
            "example" : [ "PrioritizeLargeReplicaMovementStrategy", "PostponeUrpReplicaMovementStrategy" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Upper bound on the bandwidth in bytes per second used to move replicas.",
          "in" : "query",
          "name" : "replication_throttle",
          "schema" : {
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Review id for 2-step verification.",
          "in" : "query",
          "name" : "review_id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether to allow rack awareness check to be skipped.",
          "in" : "query",
          "name" : "skip_rack_awareness_check",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to stop the ongoing execution (if any) and start executing the given request.",
          "in" : "query",
          "name" : "stop_ongoing_execution",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to only use ready goals to generate proposal.",
          "in" : "query",
          "name" : "use_ready_default_goals",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Return detailed state information.",
          "in" : "query",
          "name" : "verbose",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "True to compute proposals in fast mode, false otherwise",
          "in" : "query",
          "name" : "fast_mode",
          "schema" : {
            "default" : true,
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OptimizationResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful topic configuration response."
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgressResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Topic configuration in progress."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Change the configuration of a topic"
      }
    },
    "/kafkacruisecontrol/train" : {
      "get" : {
        "operationId" : "train",
        "parameters" : [ {
          "description" : "Timestamp in millisecond of earliest metrics sample used to train Cruise Control.",
          "in" : "query",
          "name" : "start",
          "schema" : {
            "default" : -1,
            "format" : "int64",
            "minimum" : -1,
            "type" : "integer"
          }
        }, {
          "description" : "Timestamp in millisecond of latest metrics sample used to train Cruise Control, current time will be used if this parameter is not specified.",
          "in" : "query",
          "name" : "end",
          "schema" : {
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Whether to return in JSON format or not.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TrainResult"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Successful train response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Train Cruise Control to better model broker cpu usage."
      }
    },
    "/kafkacruisecontrol/user_tasks" : {
      "get" : {
        "operationId" : "userTasks",
        "parameters" : [ {
          "description" : "Comma separated IP addresses to filter the task results Cruise Control report.",
          "in" : "query",
          "name" : "client_ids",
          "schema" : {
            "example" : "[0.0.0.1]",
            "type" : "string"
          }
        }, {
          "description" : "Comma separated endpoints to filter the task results Cruise Control report.",
          "in" : "query",
          "name" : "endpoints",
          "schema" : {
            "example" : "[PROPOSALS,REBALANCE]",
            "type" : "string"
          }
        }, {
          "description" : "The number of entries to show in the response.",
          "in" : "query",
          "name" : "entries",
          "schema" : {
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Comma separated HTTP request types to filter the task results Cruise Control report.",
          "in" : "query",
          "name" : "types",
          "schema" : {
            "example" : "[COMPLETED, ACTIVE]",
            "type" : "string"
          }
        }, {
          "description" : "Comma separated UUIDs to filter the task results Cruise Control report.",
          "in" : "query",
          "name" : "user_task_ids",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "If true, cruise-control's response is in JSON format.",
          "in" : "query",
          "name" : "json",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether return the original request's final response.",
          "in" : "query",
          "name" : "fetch_completed_task",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to return JSON schema in response header or not.",
          "in" : "query",
          "name" : "get_response_schema",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "The user specified by a trusted proxy in that authentication model.",
          "in" : "query",
          "name" : "doAs",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Reason for request.",
          "in" : "query",
          "name" : "reason",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTaskState"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "User tasks state response."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error response."
          }
        },
        "summary" : "Get the recent user tasks from cruise control."
      }
    }
  },
  "components" : {
    "schemas" : {
      "OptimizationResult" : {
        "properties" : {
          "proposals" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionProposal"
            },
            "type" : "array"
          },
          "loadBeforeOptimization" : {
            "$ref" : "#/components/schemas/BrokerStats"
          },
          "summary" : {
            "$ref" : "#/components/schemas/OptimizerResult"
          },
          "goalSummary" : {
            "items" : {
              "$ref" : "#/components/schemas/GoalStatus"
            },
            "type" : "array"
          },
          "loadAfterOptimization" : {
            "$ref" : "#/components/schemas/BrokerStats"
          },
          "version" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "goalSummary", "loadAfterOptimization", "summary" ],
        "type" : "object"
      },
      "OptimizerResult" : {
        "properties" : {
          "numReplicaMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "dataToMoveMB" : {
            "format" : "int64",
            "type" : "integer"
          },
          "numIntraBrokerReplicaMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "intraBrokerDataToMoveMB" : {
            "format" : "int64",
            "type" : "integer"
          },
          "numLeaderMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "recentWindows" : {
            "format" : "int32",
            "type" : "integer"
          },
          "monitoredPartitionsPercentage" : {
            "format" : "double",
            "type" : "number"
          },
          "excludedTopics" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "excludedBrokersForReplicaMove" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "excludedBrokersForLeadership" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "onDemandBalancednessScoreBefore" : {
            "format" : "double",
            "type" : "number"
          },
          "onDemandBalancednessScoreAfter" : {
            "format" : "double",
            "type" : "number"
          },
          "provisionStatus" : {
            "enum" : [ "UNDER_PROVISIONED", "RIGHT_SIZED", "OVER_PROVISIONED", "UNDECIDED" ],
            "type" : "string"
          },
          "provisionRecommendation" : {
            "type" : "string"
          }
        },
        "required" : [ "dataToMoveMB", "excludedBrokersForLeadership", "excludedBrokersForReplicaMove", "excludedTopics", "intraBrokerDataToMoveMB", "monitoredPartitionsPercentage", "numIntraBrokerReplicaMovements", "numLeaderMovements", "numReplicaMovements", "onDemandBalancednessScoreAfter", "onDemandBalancednessScoreBefore", "provisionRecommendation", "provisionStatus", "recentWindows" ],
        "type" : "object"
      },
      "ProgressResult" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "progress" : {
            "items" : {
              "$ref" : "#/components/schemas/OperationProgress"
            },
            "type" : "array"
          }
        },
        "required" : [ "progress", "version" ],
        "type" : "object"
      },
      "OperationProgress" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "operation" : {
            "type" : "string"
          },
          "operationProgress" : {
            "items" : {
              "$ref" : "#/components/schemas/StepProgress"
            },
            "type" : "array"
          }
        },
        "required" : [ "operation", "operationProgress", "version" ],
        "type" : "object"
      },
      "StepProgress" : {
        "properties" : {
          "step" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "time-in-ms" : {
            "format" : "int64",
            "type" : "integer"
          },
          "completionPercentage" : {
            "format" : "double",
            "type" : "number"
          }
        },
        "required" : [ "completionPercentage", "description", "step", "time-in-ms" ],
        "type" : "object"
      },
      "ErrorResponse" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "stackTrace" : {
            "type" : "string"
          },
          "errorMessage" : {
            "type" : "string"
          }
        },
        "required" : [ "errorMessage", "stackTrace", "version" ],
        "type" : "object"
      },
      "AdminResult" : {
        "properties" : {
          "selfHealingEnabledBefore" : {
            "additionalProperties" : {
              "type" : "boolean"
            },
            "type" : "object"
          },
          "selfHealingEnabledAfter" : {
            "additionalProperties" : {
              "type" : "boolean"
            },
            "type" : "object"
          },
          "ongoingConcurrencyChangeRequest" : {
            "type" : "string"
          },
          "dropRecentBrokersRequest" : {
            "type" : "string"
          },
          "concurrencyAdjusterEnabledBefore" : {
            "additionalProperties" : {
              "type" : "boolean"
            },
            "type" : "object"
          },
          "concurrencyAdjusterEnabledAfter" : {
            "additionalProperties" : {
              "type" : "boolean"
            },
            "type" : "object"
          },
          "minIsrBasedConcurrencyAdjustmentRequest" : {
            "type" : "string"
          },
          "version" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "version" ],
        "type" : "object"
      },
      "BootstrapResult" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "message", "version" ],
        "type" : "object"
      },
      "KafkaClusterState" : {
        "properties" : {
          "KafkaBrokerState" : {
            "$ref" : "#/components/schemas/ClusterBrokerState"
          },
          "KafkaPartitionState" : {
            "$ref" : "#/components/schemas/ClusterPartitionState"
          },
          "version" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "KafkaBrokerState", "KafkaPartitionState", "version" ],
        "type" : "object"
      },
      "ClusterBrokerState" : {
        "properties" : {
          "LeaderCountByBrokerId" : {
            "additionalProperties" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "object"
          },
          "OutOfSyncCountByBrokerId" : {
            "additionalProperties" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "object"
          },
          "ReplicaCountByBrokerId" : {
            "additionalProperties" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "object"
          },
          "OfflineReplicaCountByBrokerId" : {
            "additionalProperties" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "object"
          },
          "IsController" : {
            "additionalProperties" : {
              "type" : "boolean"
            },
            "type" : "object"
          },
          "OnlineLogDirsByBrokerId" : {
            "additionalProperties" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            },
            "type" : "object"
          },
          "OfflineLogDirsByBrokerId" : {
            "additionalProperties" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            },
            "type" : "object"
          },
          "Summary" : {
            "$ref" : "#/components/schemas/ClusterStats"
          }
        },
        "required" : [ "IsController", "LeaderCountByBrokerId", "OfflineLogDirsByBrokerId", "OfflineReplicaCountByBrokerId", "OnlineLogDirsByBrokerId", "OutOfSyncCountByBrokerId", "ReplicaCountByBrokerId", "Summary" ],
        "type" : "object"
      },
      "ClusterStats" : {
        "properties" : {
          "Brokers" : {
            "format" : "int32",
            "type" : "integer"
          },
          "Topics" : {
            "format" : "int32",
            "type" : "integer"
          },
          "Replicas" : {
            "format" : "int32",
            "type" : "integer"
          },
          "Leaders" : {
            "format" : "int32",
            "type" : "integer"
          },
          "AvgReplicationFactor" : {
            "format" : "double",
            "type" : "number"
          },
          "AvgReplicasPerBroker" : {
            "format" : "double",
            "type" : "number"
          },
          "AvgLeadersPerBroker" : {
            "format" : "double",
            "type" : "number"
          },
          "MaxReplicasPerBroker" : {
            "format" : "int32",
            "type" : "integer"
          },
          "MaxLeadersPerBroker" : {
            "format" : "int32",
            "type" : "integer"
          },
          "StdReplicasPerBroker" : {
            "format" : "int32",
            "type" : "integer"
          },
          "StdLeadersPerBroker" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "AvgLeadersPerBroker", "AvgReplicasPerBroker", "AvgReplicationFactor", "Brokers", "Leaders", "MaxLeadersPerBroker", "MaxReplicasPerBroker", "Replicas", "StdLeadersPerBroker", "StdReplicasPerBroker", "Topics" ],
        "type" : "object"
      },
      "ClusterPartitionState" : {
        "properties" : {
          "offline" : {
            "items" : {
              "$ref" : "#/components/schemas/PartitionState"
            },
            "type" : "array"
          },
          "with-offline-replicas" : {
            "items" : {
              "$ref" : "#/components/schemas/PartitionState"
            },
            "type" : "array"
          },
          "urp" : {
            "items" : {
              "$ref" : "#/components/schemas/PartitionState"
            },
            "type" : "array"
          },
          "under-min-isr" : {
            "items" : {
              "$ref" : "#/components/schemas/PartitionState"
            },
            "type" : "array"
          },
          "other" : {
            "items" : {
              "$ref" : "#/components/schemas/PartitionState"
            },
            "type" : "array"
          }
        },
        "required" : [ "offline", "under-min-isr", "urp", "with-offline-replicas" ],
        "type" : "object"
      },
      "PartitionState" : {
        "properties" : {
          "topic" : {
            "type" : "string"
          },
          "partition" : {
            "format" : "int32",
            "type" : "integer"
          },
          "leader" : {
            "format" : "int32",
            "type" : "integer"
          },
          "replicas" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "in-sync" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "out-of-sync" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "offline" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "min-isr" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "in-sync", "leader", "min-isr", "offline", "out-of-sync", "partition", "replicas", "topic" ],
        "type" : "object"
      },
      "BrokerStats" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "hosts" : {
            "items" : {
              "$ref" : "#/components/schemas/SingleHostStats"
            },
            "type" : "array"
          },
          "brokers" : {
            "items" : {
              "$ref" : "#/components/schemas/SingleBrokerStats"
            },
            "type" : "array"
          }
        },
        "required" : [ "brokers", "hosts" ],
        "type" : "object"
      },
      "SingleHostStats" : {
        "properties" : {
          "Host" : {
            "type" : "string"
          },
          "Rack" : {
            "type" : "string"
          },
          "DiskMB" : {
            "format" : "double",
            "type" : "number"
          },
          "DiskPct" : {
            "format" : "double",
            "type" : "number"
          },
          "CpuPct" : {
            "format" : "double",
            "type" : "number"
          },
          "LeaderNwInRate" : {
            "format" : "double",
            "type" : "number"
          },
          "FollowerNwInRate" : {
            "format" : "double",
            "type" : "number"
          },
          "NwOutRate" : {
            "format" : "double",
            "type" : "number"
          },
          "PnwOutRate" : {
            "format" : "double",
            "type" : "number"
          },
          "Replicas" : {
            "format" : "int32",
            "type" : "integer"
          },
          "Leaders" : {
            "format" : "int32",
            "type" : "integer"
          },
          "DiskCapacityMB" : {
            "format" : "double",
            "type" : "number"
          },
          "NetworkInCapacity" : {
            "format" : "double",
            "type" : "number"
          },
          "NetworkOutCapacity" : {
            "format" : "double",
            "type" : "number"
          },
          "NumCore" : {
            "format" : "int32",
            "type" : "number"
          }
        },
        "required" : [ "CpuPct", "DiskCapacityMB", "DiskMB", "DiskPct", "FollowerNwInRate", "Host", "LeaderNwInRate", "Leaders", "NetworkInCapacity", "NetworkOutCapacity", "NumCore", "NwOutRate", "PnwOutRate", "Rack", "Replicas" ],
        "type" : "object"
      },
      "SingleBrokerStats" : {
        "properties" : {
          "Host" : {
            "type" : "string"
          },
          "Broker" : {
            "format" : "int32",
            "type" : "integer"
          },
          "Rack" : {
            "type" : "string"
          },
          "BrokerState" : {
            "enum" : [ "ALIVE", "DEAD", "NEW", "DEMOTED", "BAD_DISKS" ],
            "type" : "string"
          },
          "DiskMB" : {
            "format" : "double",
            "type" : "number"
          },
          "DiskPct" : {
            "format" : "double",
            "type" : "number"
          },
          "CpuPct" : {
            "format" : "double",
            "type" : "number"
          },
          "LeaderNwInRate" : {
            "format" : "double",
            "type" : "number"
          },
          "FollowerNwInRate" : {
            "format" : "double",
            "type" : "number"
          },
          "NwOutRate" : {
            "format" : "double",
            "type" : "number"
          },
          "PnwOutRate" : {
            "format" : "double",
            "type" : "number"
          },
          "Replicas" : {
            "format" : "int32",
            "type" : "integer"
          },
          "Leaders" : {
            "format" : "int32",
            "type" : "integer"
          },
          "DiskState" : {
            "additionalProperties" : {
              "$ref" : "#/components/schemas/DiskStats"
            },
            "type" : "object"
          },
          "DiskCapacityMB" : {
            "format" : "double",
            "type" : "number"
          },
          "NetworkInCapacity" : {
            "format" : "double",
            "type" : "number"
          },
          "NetworkOutCapacity" : {
            "format" : "double",
            "type" : "number"
          },
          "NumCore" : {
            "format" : "int32",
            "type" : "number"
          }
        },
        "required" : [ "Broker", "BrokerState", "CpuPct", "DiskCapacityMB", "DiskMB", "DiskPct", "FollowerNwInRate", "Host", "LeaderNwInRate", "Leaders", "NetworkInCapacity", "NetworkOutCapacity", "NumCore", "NwOutRate", "PnwOutRate", "Rack", "Replicas" ],
        "type" : "object"
      },
      "DiskStats" : {
        "description" : "Based on _diskStatsByLogDir",
        "properties" : {
          "DiskMB" : {
            "oneOf" : [ {
              "enum" : [ "DEAD" ],
              "type" : "string"
            }, {
              "format" : "double",
              "type" : "number"
            } ]
          },
          "DiskPct" : {
            "oneOf" : [ {
              "enum" : [ "DEAD" ],
              "type" : "string"
            }, {
              "format" : "double",
              "type" : "number"
            } ]
          },
          "NumLeaderReplicas" : {
            "format" : "int32",
            "type" : "integer"
          },
          "NumReplicas" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "DiskMB", "DiskPct", "NumLeaderReplicas", "NumReplicas" ],
        "type" : "object"
      },
      "PartitionLoadState" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "records" : {
            "items" : {
              "$ref" : "#/components/schemas/PartitionLoadRecord"
            },
            "type" : "array"
          }
        },
        "required" : [ "records", "version" ],
        "type" : "object"
      },
      "PartitionLoadRecord" : {
        "properties" : {
          "topic" : {
            "type" : "string"
          },
          "partition" : {
            "format" : "int32",
            "type" : "integer"
          },
          "leader" : {
            "format" : "int32",
            "type" : "integer"
          },
          "followers" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "cpu" : {
            "format" : "double",
            "type" : "integer"
          },
          "networkInbound" : {
            "format" : "double",
            "type" : "integer"
          },
          "networkOutbound" : {
            "format" : "double",
            "type" : "integer"
          },
          "disk" : {
            "format" : "double",
            "type" : "integer"
          },
          "msg_in" : {
            "format" : "double",
            "type" : "integer"
          }
        },
        "required" : [ "cpu", "disk", "followers", "leader", "msg_in", "networkInbound", "networkOutbound", "partition", "topic" ],
        "type" : "object"
      },
      "PauseSamplingResult" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "message", "version" ],
        "type" : "object"
      },
      "RightsizeResult" : {
        "properties" : {
          "numBrokersToAdd" : {
            "format" : "int32",
            "type" : "integer"
          },
          "partitionCount" : {
            "format" : "int32",
            "type" : "integer"
          },
          "topic" : {
            "type" : "string"
          },
          "provisionerState" : {
            "type" : "string"
          },
          "version" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "provisionerState", "version" ],
        "type" : "object"
      },
      "ResumeSamplingResult" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "message", "version" ],
        "type" : "object"
      },
      "ReviewResult" : {
        "properties" : {
          "RequestInfo" : {
            "$ref" : "#/components/schemas/RequestInfo"
          },
          "version" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "RequestInfo", "vesion" ],
        "type" : "object"
      },
      "RequestInfo" : {
        "properties" : {
          "Id" : {
            "format" : "int32",
            "type" : "integer"
          },
          "SubmitterAddress" : {
            "type" : "string"
          },
          "SubmissionTimeMs" : {
            "format" : "int64",
            "type" : "integer"
          },
          "Status" : {
            "enum" : [ "PENDING_REVIEW", "APPROVED", "SUBMITTED", "DISCARDED" ],
            "type" : "string"
          },
          "EndpointWithParams" : {
            "type" : "string"
          },
          "Reason" : {
            "type" : "string"
          }
        },
        "required" : [ "EndpointWithParams", "Id", "Reason", "Status", "SubmissionTimeMs", "SubmitterAddress" ],
        "type" : "object"
      },
      "CruiseControlState" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "MonitorState" : {
            "$ref" : "#/components/schemas/LoadMonitorState"
          },
          "ExecutorState" : {
            "$ref" : "#/components/schemas/ExecutorState"
          },
          "AnalyzerState" : {
            "$ref" : "#/components/schemas/AnalyzerState"
          },
          "AnomalyDetectorState" : {
            "$ref" : "#/components/schemas/AnomalyDetectorState"
          }
        },
        "required" : [ "version" ],
        "type" : "object"
      },
      "StopProposalResult" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "message", "version" ],
        "type" : "object"
      },
      "TrainResult" : {
        "properties" : {
          "version" : {
            "format" : "int32",
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "message", "version" ],
        "type" : "object"
      },
      "UserTaskState" : {
        "properties" : {
          "userTasks" : {
            "items" : {
              "$ref" : "#/components/schemas/UserTaskInfo"
            },
            "type" : "array"
          },
          "version" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "userTasks", "version" ],
        "type" : "object"
      },
      "UserTaskInfo" : {
        "properties" : {
          "UserTaskId" : {
            "type" : "string"
          },
          "RequestURL" : {
            "type" : "string"
          },
          "ClientIdentity" : {
            "type" : "string"
          },
          "StartMs" : {
            "type" : "string"
          },
          "Status" : {
            "enum" : [ "Active", "InExecution", "Completed", "CompletedWithError" ],
            "type" : "string"
          },
          "originalResponse" : {
            "type" : "string"
          }
        },
        "required" : [ "ClientIdentity", "RequestURL", "StartMs", "Status", "UserTaskId" ],
        "type" : "object"
      },
      "ExecutionProposal" : {
        "properties" : {
          "topicPartition" : {
            "type" : "string"
          },
          "oldLeader" : {
            "format" : "int32",
            "type" : "integer"
          },
          "oldReplicas" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "newReplicas" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          }
        },
        "required" : [ "newReplicas", "oldLeader", "oldReplicas", "topicPartition" ],
        "type" : "object"
      },
      "GoalStatus" : {
        "properties" : {
          "goal" : {
            "type" : "string"
          },
          "status" : {
            "enum" : [ "VIOLATED", "FIXED", "NO-ACTION" ],
            "type" : "string"
          },
          "clusterModelStats" : {
            "$ref" : "#/components/schemas/ClusterModelStats"
          },
          "optimizationTimeMs" : {
            "format" : "int64",
            "type" : "integer"
          }
        },
        "required" : [ "clusterModelStats", "goal", "optimizationTimeMs", "status" ],
        "type" : "object"
      },
      "LoadMonitorState" : {
        "properties" : {
          "state" : {
            "enum" : [ "NOT_STARTED", "RUNNING", "PAUSED", "SAMPLING", "BOOTSTRAPPING", "TRAINING", "LOADING" ],
            "type" : "string"
          },
          "trained" : {
            "type" : "boolean"
          },
          "trainingPct" : {
            "format" : "double",
            "type" : "number"
          },
          "numMonitoredWindows" : {
            "type" : "number"
          },
          "monitoredWindows" : {
            "additionalProperties" : {
              "format" : "double",
              "type" : "number"
            },
            "type" : "object"
          },
          "numValidPartitions" : {
            "type" : "number"
          },
          "numTotalPartitions" : {
            "type" : "number"
          },
          "monitoringCoveragePct" : {
            "format" : "double",
            "type" : "number"
          },
          "numFlawedPartitions" : {
            "type" : "number"
          },
          "reasonOfLatestPauseOrResume" : {
            "type" : "string"
          },
          "bootstrapProgressPct" : {
            "format" : "double",
            "type" : "number"
          },
          "loadingProgressPct" : {
            "format" : "double",
            "type" : "number"
          },
          "error" : {
            "type" : "string"
          }
        },
        "required" : [ "monitoringCoveragePct", "numFlawedPartitions", "numMonitoredWindows", "numTotalPartitions", "numValidPartitions", "state", "trained", "trainingPct" ],
        "type" : "object"
      },
      "ExecutorState" : {
        "properties" : {
          "triggeredUserTaskId" : {
            "type" : "string"
          },
          "triggeredSelfHealingTaskId" : {
            "type" : "string"
          },
          "triggeredTaskReason" : {
            "type" : "string"
          },
          "state" : {
            "enum" : [ "NO_TASK_IN_PROGRESS", "STARTING_EXECUTION", "INTER_BROKER_REPLICA_MOVEMENT_TASK_IN_PROGRESS", "INTRA_BROKER_REPLICA_MOVEMENT_TASK_IN_PROGRESS", "LEADER_MOVEMENT_TASK_IN_PROGRESS", "STOPPING_EXECUTION", "INITIALIZING_PROPOSAL_EXECUTION", "GENERATING_PROPOSALS_FOR_EXECUTION" ],
            "type" : "string"
          },
          "recentlyDemotedBrokers" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "recentlyRemovedBrokers" : {
            "items" : {
              "format" : "int32",
              "type" : "integer"
            },
            "type" : "array"
          },
          "numTotalLeadershipMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numCancelledLeadershipMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numPendingLeadershipMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numFinishedLeadershipMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "pendingLeadershipMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "cancelledLeadershipMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "maximumConcurrentLeaderMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numTotalPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numPendingPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numCancelledPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numInProgressPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "abortingPartitions" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numFinishedPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "inProgressPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "pendingPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "cancelledPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "deadPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "completedPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "abortingPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "abortedPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "finishedDataMovement" : {
            "format" : "int64",
            "type" : "integer"
          },
          "totalDataToMove" : {
            "format" : "int64",
            "type" : "integer"
          },
          "maximumConcurrentPartitionMovementsPerBroker" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numTotalIntraBrokerPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numFinishedIntraBrokerPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numInProgressIntraBrokerPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numAbortingIntraBrokerPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numPendingIntraBrokerPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "numCancelledIntraBrokerPartitionMovements" : {
            "format" : "int32",
            "type" : "integer"
          },
          "inProgressIntraBrokerPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "pendingIntraBrokerPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "cancelledIntraBrokerPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "deadIntraBrokerPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "completedIntraBrokerPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "abortingIntraBrokerPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "abortedIntraBrokerPartitionMovement" : {
            "items" : {
              "$ref" : "#/components/schemas/ExecutionTask"
            },
            "type" : "array"
          },
          "finishedIntraBrokerDataMovement" : {
            "format" : "int64",
            "type" : "integer"
          },
          "totalIntraBrokerDataToMove" : {
            "format" : "int64",
            "type" : "integer"
          },
          "maximumConcurrentIntraBrokerPartitionMovementsPerBroker" : {
            "format" : "int32",
            "type" : "integer"
          },
          "error" : {
            "type" : "string"
          }
        },
        "required" : [ "state" ],
        "type" : "object"
      },
      "ExecutionTask" : {
        "properties" : {
          "executionId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "type" : {
            "enum" : [ "INTER_BROKER_REPLICA_ACTION", "INTRA_BROKER_REPLICA_ACTION", "LEADER_ACTION" ],
            "type" : "string"
          },
          "state" : {
            "enum" : [ "PENDING", "IN_PROGRESS", "ABORTING", "ABORTED", "DEAD", "COMPLETED" ],
            "type" : "string"
          },
          "proposal" : {
            "$ref" : "#/components/schemas/ExecutionProposal"
          },
          "brokerId" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "brokerId", "executionId", "proposal", "state", "type" ],
        "type" : "object"
      },
      "AnalyzerState" : {
        "properties" : {
          "isProposalReady" : {
            "type" : "boolean"
          },
          "readyGoals" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "goalReadiness" : {
            "items" : {
              "$ref" : "#/components/schemas/GoalReadinessRecord"
            },
            "type" : "array"
          }
        },
        "required" : [ "isProposalReady", "readyGoals" ],
        "type" : "object"
      },
      "GoalReadinessRecord" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "modelCompleteRequirement" : {
            "$ref" : "#/components/schemas/ModelCompletenessRequirements"
          },
          "status" : {
            "enum" : [ "ready", "notReady" ],
            "type" : "string"
          }
        },
        "required" : [ "modelCompleteRequirement", "name", "status" ],
        "type" : "object"
      },
      "ModelCompletenessRequirements" : {
        "properties" : {
          "requiredNumSnapshots" : {
            "type" : "number"
          },
          "minMonitoredPartitionsPercentage" : {
            "type" : "number"
          },
          "includeAllTopics" : {
            "type" : "boolean"
          }
        },
        "required" : [ "includeAllTopics", "minMonitoredPartitionsPercentage", "requiredNumSnapshots" ],
        "type" : "object"
      },
      "AnomalyDetectorState" : {
        "properties" : {
          "selfHealingEnabled" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "selfHealingDisabled" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "selfHealingEnabledRatio" : {
            "$ref" : "#/components/schemas/SelfHealingEnabledRatio"
          },
          "recentGoalViolations" : {
            "items" : {
              "$ref" : "#/components/schemas/AnomalyDetails"
            },
            "type" : "array"
          },
          "recentBrokerFailures" : {
            "items" : {
              "$ref" : "#/components/schemas/AnomalyDetails"
            },
            "type" : "array"
          },
          "recentMetricAnomalies" : {
            "items" : {
              "$ref" : "#/components/schemas/AnomalyDetails"
            },
            "type" : "array"
          },
          "recentDiskFailures" : {
            "items" : {
              "$ref" : "#/components/schemas/AnomalyDetails"
            },
            "type" : "array"
          },
          "recentTopicAnomalies" : {
            "items" : {
              "$ref" : "#/components/schemas/AnomalyDetails"
            },
            "type" : "array"
          },
          "recentMaintenanceEvents" : {
            "items" : {
              "$ref" : "#/components/schemas/AnomalyDetails"
            },
            "type" : "array"
          },
          "metrics" : {
            "$ref" : "#/components/schemas/AnomalyMetrics"
          },
          "ongoingSelfHealingAnomaly" : {
            "type" : "string"
          },
          "balancednessScore" : {
            "format" : "double",
            "type" : "number"
          }
        },
        "required" : [ "balancednessScore", "metrics", "recentBrokerFailures", "recentDiskFailures", "recentGoalViolations", "recentMaintenanceEvents", "recentMetricAnomalies", "recentTopicAnomalies", "selfHealingDisabled", "selfHealingEnabled", "selfHealingEnabledRatio" ],
        "type" : "object"
      },
      "SelfHealingEnabledRatio" : {
        "properties" : {
          "GOAL_VIOLATION" : {
            "format" : "float",
            "type" : "number"
          },
          "BROKER_FAILURE" : {
            "format" : "float",
            "type" : "number"
          },
          "METRIC_ANOMALY" : {
            "format" : "float",
            "type" : "number"
          },
          "DISK_FAILURE" : {
            "format" : "float",
            "type" : "number"
          },
          "TOPIC_ANOMALY" : {
            "format" : "float",
            "type" : "number"
          },
          "MAINTENANCE_EVENT" : {
            "format" : "float",
            "type" : "number"
          }
        },
        "required" : [ "BROKER_FAILURE", "DISK_FAILURE", "GOAL_VIOLATION", "MAINTENANCE_EVENT", "METRIC_ANOMALY", "TOPIC_ANOMALY" ]
      },
      "AnomalyDetails" : {
        "properties" : {
          "statusUpdateMs" : {
            "format" : "int64",
            "type" : "integer"
          },
          "detectionMs" : {
            "format" : "int64",
            "type" : "integer"
          },
          "status" : {
            "enum" : [ "DETECTED", "IGNORED", "FIX_STARTED", "FIX_FAILED_TO_START", "CHECK_WITH_DELAY", "LOAD_MONITOR_NOT_READY", "COMPLETENESS_NOT_READY" ],
            "type" : "string"
          },
          "anomalyId" : {
            "type" : "string"
          },
          "fixableViolatedGoals" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "unfixableViolatedGoals" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "optimizationResult" : {
            "type" : "string"
          },
          "failedBrokersByTimeMs" : {
            "additionalProperties" : {
              "format" : "int64",
              "type" : "integer"
            },
            "description" : "Dictionary of broker id to failure time in MS.",
            "type" : "object"
          },
          "failedDisksByTimeMs" : {
            "additionalProperties" : {
              "additionalProperties" : {
                "format" : "int64",
                "type" : "integer"
              },
              "type" : "object"
            },
            "description" : "Dictionary of broker id to a dictionary of log dir to failure time in MS.",
            "type" : "object"
          },
          "description" : {
            "type" : "string"
          }
        },
        "required" : [ "anomalyId", "detectionMs", "status", "statusUpdateMs" ],
        "type" : "object"
      },
      "AnomalyMetrics" : {
        "properties" : {
          "meanTimeBetweenAnomaliesMs" : {
            "$ref" : "#/components/schemas/MeanTimeBetweenAnomaliesMs"
          },
          "meanTimeToStartFixMs" : {
            "format" : "double",
            "type" : "number"
          },
          "numSelfHealingStarted" : {
            "format" : "int64",
            "type" : "integer"
          },
          "numSelfHealingFailedToStart" : {
            "format" : "int64",
            "type" : "integer"
          },
          "ongoingAnomalyDurationMs" : {
            "format" : "int64",
            "type" : "integer"
          }
        },
        "required" : [ "meanTimeBetweenAnomaliesMs", "meanTimeToStartFixMs", "numSelfHealingFailedToStart", "numSelfHealingStarted", "ongoingAnomalyDurationMs" ],
        "type" : "object"
      },
      "MeanTimeBetweenAnomaliesMs" : {
        "properties" : {
          "GOAL_VIOLATION" : {
            "format" : "double",
            "type" : "number"
          },
          "BROKER_FAILURE" : {
            "format" : "double",
            "type" : "number"
          },
          "METRIC_ANOMALY" : {
            "format" : "double",
            "type" : "number"
          },
          "DISK_FAILURE" : {
            "format" : "double",
            "type" : "number"
          },
          "TOPIC_ANOMALY" : {
            "format" : "double",
            "type" : "number"
          },
          "MAINTENANCE_EVENT" : {
            "format" : "double",
            "type" : "number"
          }
        },
        "required" : [ "BROKER_FAILURE", "DISK_FAILURE", "GOAL_VIOLATION", "MAINTENANCE_EVENT", "METRIC_ANOMALY", "TOPIC_ANOMALY" ]
      },
      "ClusterModelStats" : {
        "properties" : {
          "metadata" : {
            "$ref" : "#/components/schemas/ClusterModelStatsMetaData"
          },
          "statistics" : {
            "$ref" : "#/components/schemas/ClusterModelStatsValue"
          }
        },
        "required" : [ "metadata", "statistics" ],
        "type" : "object"
      },
      "ClusterModelStatsMetaData" : {
        "properties" : {
          "brokers" : {
            "format" : "int32",
            "type" : "integer"
          },
          "replicas" : {
            "format" : "int32",
            "type" : "integer"
          },
          "topics" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "brokers", "replicas", "topics" ],
        "type" : "object"
      },
      "ClusterModelStatsValue" : {
        "properties" : {
          "AVG" : {
            "$ref" : "#/components/schemas/ClusterModelStatsValueHolder"
          },
          "MAX" : {
            "$ref" : "#/components/schemas/ClusterModelStatsValueHolder"
          },
          "MIN" : {
            "$ref" : "#/components/schemas/ClusterModelStatsValueHolder"
          },
          "STD" : {
            "$ref" : "#/components/schemas/ClusterModelStatsValueHolder"
          }
        },
        "required" : [ "AVG", "MAX", "MIN", "STD" ],
        "type" : "object"
      },
      "ClusterModelStatsValueHolder" : {
        "properties" : {
          "cpu" : {
            "format" : "double",
            "type" : "number"
          },
          "networkInbound" : {
            "format" : "double",
            "type" : "number"
          },
          "networkOutbound" : {
            "format" : "double",
            "type" : "number"
          },
          "disk" : {
            "format" : "double",
            "type" : "number"
          },
          "potentialNwOut" : {
            "format" : "double",
            "type" : "number"
          },
          "replicas" : {
            "type" : "number"
          },
          "leaderReplicas" : {
            "type" : "number"
          },
          "topicReplicas" : {
            "type" : "number"
          }
        },
        "required" : [ "cpu", "disk", "leaderReplicas", "networkInbound", "networkOutbound", "potentialNwOut", "replicas", "topicReplicas" ],
        "type" : "object"
      }
    }
  }
}